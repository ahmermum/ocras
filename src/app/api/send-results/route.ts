import { NextResponse } from 'next/server'
import nodemailer from 'nodemailer'

export async function POST(request: Request) {
  try {
    const results = await request.json()

    // Log environment variables (excluding password)
    console.log('SMTP Configuration:', {
      host: process.env.SMTP_HOST,
      port: process.env.SMTP_PORT,
      user: process.env.SMTP_USER,
      from: process.env.SMTP_FROM
    })

    if (!process.env.SMTP_HOST || !process.env.SMTP_PORT || !process.env.SMTP_USER || !process.env.SMTP_PASS) {
      return NextResponse.json(
        { error: 'Missing SMTP configuration' },
        { status: 500 }
      )
    }

    const transporter = nodemailer.createTransport({
      host: process.env.SMTP_HOST,
      port: Number(process.env.SMTP_PORT),
      secure: true,
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
      debug: true // Enable debug logs
    })

    try {
      await transporter.verify()
    } catch (verifyError: any) {
      console.error('SMTP Verification Error:', {
        message: verifyError.message,
        code: verifyError.code,
        command: verifyError.command
      })
      
      return NextResponse.json(
        { error: `SMTP Verification failed: ${verifyError.message}` },
        { status: 500 }
      )
    }

    const emailContent = `
Assessment Results Summary
=========================

Student: ${results.studentName}
Total Score: ${results.totalMarks}/${results.totalPossibleMarks}

Detailed Question Analysis
-------------------------
${results.questions.map((q: {
  questionNumber: number;
  marks: number;
  totalPossibleMarks: number;
  studentCode: string;
  feedback: string;
}) => `
Question ${q.questionNumber}
------------------
Score: ${q.marks}/${q.totalPossibleMarks}

Student's Code:
${q.studentCode.trim()}

Feedback:
${q.feedback.trim()}
`).join('\n\n')}

-----------------------------------
Generated by OCRAS Assessment System
`

    await transporter.sendMail({
      from: process.env.SMTP_FROM,
      to: results.teacherEmail,
      subject: `Assessment Results - ${results.studentName}`,
      text: emailContent,
    })

    return NextResponse.json({ success: true })
  } catch (error: any) {
    console.error('Email sending error:', {
      message: error.message,
      stack: error.stack
    })

    return NextResponse.json(
      { error: error.message || 'Failed to send results' },
      { status: 500 }
    )
  }
} 